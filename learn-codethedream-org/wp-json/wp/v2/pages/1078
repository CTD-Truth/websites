{"id":1078,"date":"2021-05-17T21:05:32","date_gmt":"2021-05-18T01:05:32","guid":{"rendered":"https:\/\/learn.codethedream.org\/?page_id=1078"},"modified":"2021-07-27T14:17:50","modified_gmt":"2021-07-27T18:17:50","slug":"r6-bootstrap","status":"publish","type":"page","link":"https:\/\/learn.codethedream.org\/r6-bootstrap\/","title":{"rendered":"Styling Your Rails 6 Application with Bootstrap"},"content":{"rendered":"\n<p>To create attractive web applications, it is necessary to apply styling.  You have taken a previous course on HTML and CSS, and you have watched the Treehouse video on the Bootstrap CSS styling classes.  In this lesson, you will use Bootstrap 4 classes to style the application you have created.  This lesson builds on the previous ones.  You will use the same github repository, R6-validations, but for this lesson, you should create a new branch called bootstrap.  Make sure that the full-assignment branch is active when you create the bootstrap branch, so that your work adds to what you did before.<\/p>\n\n\n\n<h2>Configuration<\/h2>\n\n\n\n<p>First, you have to add Bootstrap to the environment.  This is very easy in Rails 6.  First, within the R6-validations directory, enter the following command:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn add bootstrap@4.3.1 jquery popper.js<\/code><\/pre>\n\n\n\n<p>We are also going to use a tool called font-awesome, which provides icons and glyphs.  So enter this command as well:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn add @fortawesome\/fontawesome-free<\/code><\/pre>\n\n\n\n<p>Then edit config\/webpack\/environment.js, adding lines so that it looks like this:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>const { environment } = require('@rails\/webpacker')\nconst webpack = require(\"webpack\")\nenvironment.plugins.append(\"Provide\", new webpack.ProvidePlugin({\n  $: 'jquery',\n  jQuery: 'jquery',\n  Popper: &#91;'popper.js', 'default']\n}))\n\nmodule.exports = environment<\/code><\/pre>\n\n\n\n<p>Then edit app\/assets\/stylesheets\/application.css to add this line:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>*= require bootstrap<\/code><\/pre>\n\n\n\n<p>This line should be added right before the *= require_tree . line.  Then edit app\/javascript\/packs\/application.js and add these two lines:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import \"bootstrap\"\nimport \"@fortawesome\/fontawesome-free\/css\/all\"<\/code><\/pre>\n\n\n\n<p>These lines should be added right after the import &#8220;channels&#8221; line.<\/p>\n\n\n\n<p>This completes the configuration.  Bootstrap and Fontawesome are now available in the application.<\/p>\n\n\n\n<h2>Using Bootstrap For Styling<\/h2>\n\n\n\n<p>We want to use a single layout, which is app\/views\/layouts\/application.html.erb, so that we can have a single navbar and a single jumbotron.  So take the line out of app\/controllers\/customer_controller.rb that says layout &#8216;customer_layout&#8217;.  Then copy this section into the application.html.erb:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    &lt;% if !flash&#91;:alert].nil? %&gt;\n      &lt;p class=\"my_alert\"&gt;&lt;%= flash&#91;:alert] %&gt;&lt;\/p&gt;\n    &lt;% end %&gt;<\/code><\/pre>\n\n\n\n<p>You want it just below the body tag.  When you add the jumbotron and the navbar, this section will be after the jumbotron but before the navbar.<\/p>\n\n\n\n<p>Edit app\/views\/layouts\/application.html.erb.  You are going to add a jumbotron div and a navbar.  The jumbotron div has a class called &#8220;jumbotron&#8221;.  You can put text inside as you choose.  The navbar should have two pulldown menus, one for Customers and one for Orders.  The items in the Customers pulldown should be List Customers and New Customer.  The items in the Orders pulldown should be List Orders and New Order.  Each should link to pages you already have.  The Bootstrap navbar is documented here: <a rel=\"noreferrer noopener\" href=\"https:\/\/getbootstrap.com\/docs\/4.0\/components\/navbar\/\" target=\"_blank\">https:\/\/getbootstrap.com\/docs\/4.0\/components\/navbar\/<\/a> and it was also covered in the Treehouse video.  Choose a contrasting color for your navbar.  I find navbars confusing, so you can use this cheatsheet: <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;nav class=\"navbar navbar-expand-sm   navbar-dark bg-primary\"&gt;\n&lt;ul class=\"navbar-nav mr-auto mt-2 mt-lg-0\"&gt;\n  &lt;li class=\"nav-item dropdown dmenu\"&gt;\n  &lt;a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbardrop\" data-toggle=\"dropdown\"&gt;\n    Customers\n  &lt;\/a&gt;\n  &lt;div class=\"dropdown-menu sm-menu\"&gt;\n    &lt;%= link_to 'List Customers', customers_path, class: \"dropdown-item\" %&gt;\n    &lt;%= link_to 'New Customer', new_customer_path, class: \"dropdown-item\" %&gt;\n  &lt;\/div&gt;\n&lt;\/li&gt;\n &lt;li class=\"nav-item dropdown dmenu\"&gt;\n  &lt;a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbardrop\" data-toggle=\"dropdown\"&gt;\n    Orders\n  &lt;\/a&gt;\n  &lt;div class=\"dropdown-menu sm-menu\"&gt;\n    &lt;%= link_to 'List Orders', orders_path, class: \"dropdown-item\" %&gt;\n    &lt;%= link_to 'New Order', new_order_path, class: \"dropdown-item\" %&gt;\n  &lt;\/div&gt;\n&lt;\/li&gt;\n&lt;\/ul&gt;\n&lt;\/nav&gt;\n<\/code><\/pre>\n\n\n\n<p>In your various views, you have links and submit buttons.  These should all be styled to look like Bootstrap buttons.  This is done by adding the classes &#8220;btn btn-primary&#8221; to your link_to and form.submit form items.  For example, the link to show a customer should look like:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%= link_to 'Show', person, class: \"btn btn-primary\" %&gt;<\/code><\/pre>\n\n\n\n<p>Give your tables the Bootstrap &#8220;table&#8221; class.  <br><br>Put the contents of each &#8220;show&#8221; page into a Bootstrap card, which is a div of with the &#8220;card&#8221; class.  The card class is described here: <a rel=\"noreferrer noopener\" href=\"https:\/\/getbootstrap.com\/docs\/5.0\/components\/card\/\" target=\"_blank\">https:\/\/getbootstrap.com\/docs\/5.0\/components\/card\/<\/a>  You should create a shadow around the card to make it look nice, as per:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class=\"card shadow p-3 mb-5 bg-white rounded\"&gt;<\/code><\/pre>\n\n\n\n<h2>Adding Fontawesome Icons<\/h2>\n\n\n\n<p>Add Fontawesome Icons somewhere in your views.  For example, each row in a table could start with an additional column for the icon.  Here is an example of an entry for an icon:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;i class=\"far fa-address-book\"&gt;&lt;\/i&gt;<\/code><\/pre>\n\n\n\n<p>The icons you have to choose from are <strong><a rel=\"noreferrer noopener\" href=\"https:\/\/fontawesome.com\/icons?d=gallery&amp;p=2&amp;m=free\" target=\"_blank\">here.<\/a><\/strong><\/p>\n\n\n\n<h2>Adding an Image<\/h2>\n\n\n\n<p>You can add a jpeg or png file as an image.   There are plenty of free ones on the internet.  The image file should be stored in app\/assets\/images.  You can then create a class which, when applied to a given div such as the jumbotron div, will load the image in the background.  For example, in your app\/assets\/stylesheets\/application.css, you could define this class:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>.jumbo-background {\n  background-image: url('miscpng.png');\n  background-size: cover;\n}<\/code><\/pre>\n\n\n\n<p>Style your jumbotron with the image you choose.<\/p>\n\n\n\n<h2>Adding a Custom Font<\/h2>\n\n\n\n<p>There are free custom fonts also available for download from the internet.  Find one that you like, and apply it to all the h1 entries in your application.  The font file, often a tff file, should be stored in a directory app\/assets\/fonts.  You will have to create this directory.  Then you will need stanzas to declare the font and to apply the font as a style in your application.css file, something like this:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>@font-face {\n    font-family: 'MONBIJOUX';\n    src: url('MONBIJOUX.ttf');\n }\n\n h1 {\n   font-family: 'MONBIJOUX';\n }<\/code><\/pre>\n\n\n\n<h2>Creating Your Own Styles<\/h2>\n\n\n\n<p>You may want to create styles that are not part of the Bootstrap set, or to override the styles in Bootstrap.  To do this, you edit app\/assets\/stylesheets\/application.css.  You use the usual CSS syntax in this file.   The styles you create will be accessible in all of your html.erb views. The file is sometimes renamed as application.css.scss, and if this is done, you have the additional power of Sass.  Sass is a superset of css, which adds the capability of setting variable names and using macros like @include.  We don&#8217;t teach Sass in this course, and you don&#8217;t really need it.  You can also put css styles into controller specific css files in the app\/assets\/stylesheets directory, but by default these are all included by the require_tree directive.  Do not put styles into your html.erb forms.  They should be in app\/assets\/stylesheets\/application.css.<\/p>\n\n\n\n<h2>Completing your Styling and Submitting<\/h2>\n\n\n\n<p>You may want to do other styling to make your application look good.  The views you create with Rails support all the standard HTML and CSS styling techniques.  When you are through with these steps, push the bootstrap branch to github as usual, create your pull request, and submit your assignment using Squibby.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>To create attractive web applications, it is necessary to apply styling. You have taken a previous course on HTML and CSS, and you have watched the Treehouse video on the Bootstrap CSS styling classes. In this lesson, you will use Bootstrap 4 classes to style the application you have created. This lesson builds on the<\/p>\n","protected":false},"author":5,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":{"_genesis_hide_title":false,"_genesis_hide_breadcrumbs":false,"_genesis_hide_singular_image":false,"_genesis_hide_footer_widgets":false,"_genesis_custom_body_class":"","_genesis_custom_post_class":"","_genesis_layout":"","_vp_format_video_url":"","_vp_image_focal_point":[]},"featured_image_src":null,"featured_image_src_square":null,"_links":{"self":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/pages\/1078"}],"collection":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/users\/5"}],"replies":[{"embeddable":true,"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/comments?post=1078"}],"version-history":[{"count":0,"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/pages\/1078\/revisions"}],"wp:attachment":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/media?parent=1078"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}