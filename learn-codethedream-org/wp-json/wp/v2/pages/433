{"id":433,"date":"2020-08-07T16:49:56","date_gmt":"2020-08-07T20:49:56","guid":{"rendered":"https:\/\/learnctd.wpengine.com\/?page_id=433"},"modified":"2020-10-05T14:43:58","modified_gmt":"2020-10-05T18:43:58","slug":"backend-2-json-rest-api-swagger-ajax","status":"publish","type":"page","link":"https:\/\/learn.codethedream.org\/backend-2-json-rest-api-swagger-ajax\/","title":{"rendered":"Backend 2 JSON\/REST API, Swagger, Ajax"},"content":{"rendered":"\n<p>For this lesson, we will do part 1 of this tutorial: <a href=\"https:\/\/scotch.io\/tutorials\/build-a-restful-json-api-with-rails-5-part-one\">https:\/\/scotch.io\/tutorials\/build-a-restful-json-api-with-rails-5-part-one<\/a> .  An initial workspace with the starter version of the Rails application is available <strong><a href=\"https:\/\/classroom.github.com\/a\/SvTZJu_F\">here<\/a>.<\/strong><\/p>\n\n\n\n<h2>Introductory Reading<\/h2>\n\n\n\n<p>We are going to create an API that communicates using REST protocols, and that exchanges JSON data.  It&#8217;s a good idea to understand what REST is:<\/p>\n\n\n\n<p><a href=\"https:\/\/dzone.com\/articles\/introduction-to-rest-api-restful-web-services\">https:\/\/dzone.com\/articles\/introduction-to-rest-api-restful-web-services<\/a><\/p>\n\n\n\n<p>And also, you will want to understand JSON:<\/p>\n\n\n\n<figure class=\"wp-block-embed-youtube wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" title=\"Learn JSON - Full Crash Course for Beginners\" width=\"500\" height=\"281\" src=\"https:\/\/www.youtube.com\/embed\/GpOO5iKzOmY?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>\n<\/div><\/figure>\n\n\n\n<h2>Creating the API Server Application<\/h2>\n\n\n\n<p>The tutorial suggests that you do gem update rails.  DO NOT DO THIS.  That would take you to Rails 6, which has some complexities that we don&#8217;t want to take up at this time.  Also, do not do the &#8220;rails new&#8221; command.  Since you are starting from an existing workspace, that has been done for you.<\/p>\n\n\n\n<p>Otherwise, carefully follow the instructions in the tutorial on creating the API in Rails.  In completing the tutorial, I found the following corrections were necessary.<\/p>\n\n\n\n<p>First, you must install httpie for use in testing.  This is described here: <a href=\"https:\/\/httpie.org\/\">https:\/\/httpie.org\/<\/a> The steps to install it are:<\/p>\n\n\n\n<p>On MacOS: brew install httpie<\/p>\n\n\n\n<p>On Linux (inluding Vagrant linux under WIndows): sudo apt install httpie<\/p>\n\n\n\n<p>Second, before you run Rspec, but after you do bin\/rails db:migrate, you will need to do<\/p>\n\n\n\n<p>bin\/rails db:migrate RAILS_ENV=test<\/p>\n\n\n\n<p>Third, at one point in the instructions, there is the following typo:<\/p>\n\n\n\n<p>RSpec.configuration do |config|<\/p>\n\n\n\n<p>It should be<\/p>\n\n\n\n<p>RSpec.configure do |config|<\/p>\n\n\n\n<p>To run Rspec, you should do:<\/p>\n\n\n\n<p> bundle exec rspec <\/p>\n\n\n\n<p>There are also some problems with the descriptions of the Todo and Item factories as described in the tutorial.  The factory files should actually read as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code># spec\/factories\/todos.rb\nFactoryBot.define do\n  factory :todo do\n    title { Faker::Lorem.word }\n    created_by { Faker::Number.number(digits: 10) }\n  end\nend\n<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code># spec\/factories\/items.rb\nFactoryBot.define do\n  factory :item do\n    name { Faker::Movies::StarWars.character }\n    done { false }\n    todo_id { nil }\n  end\nend<\/code><\/pre>\n\n\n\n<p>When you are finished with all of the steps in the tutorial, be sure you use httpie to test all of the operations, and using httpie create a few todos, and a few items belonging to each todo.<\/p>\n\n\n\n<h2>Adding Swagger<\/h2>\n\n\n\n<p>Swagger is a framework to document and test REST APIs.  The following instructions describe how you add Swagger enablement to your API application.<\/p>\n\n\n\n<p>First, add this line to the Gemfile:<\/p>\n\n\n\n<p>gem &#8216;rswag&#8217;<\/p>\n\n\n\n<p>Be sure you add it to the section before the development, test section in the Gemfile.  Then do a bundle install.  Then do<\/p>\n\n\n\n<p>bin\/rails g rswag:install<\/p>\n\n\n\n<p>Swagger pages are defined using a YAML file, which is automatically generated from your Rspec test files &#8212; but only for test items that are of a certain format.  Therefore, you must add the following lines to spec\/requests\/todos_spec.rb, just before the final end:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  path '\/todos' do\n\n    get('list todos') do\n      tags 'Todos'\n      response(200, 'successful') do\n\n        after do |example|\n          example.metadata&#91;:response]&#91;:examples] = { 'application\/json' => JSON.parse(response.body, symbolize_names: true) }\n        end\n        run_test!\n      end\n    end\n\n    post('create todo') do\n      tags 'Todos'\n      consumes 'application\/json'\n      produces 'application\/json'\n      parameter name: :todo, in: :body, required: true, schema: {\n        type: :object,\n        required: %i&#91;title created_by],\n        properties: {\n          title: { type: :string },\n          created_by: { type: :string }\n        }\n      }\n      response(201, 'successful') do\n        let(:todo) { { title: 'Learn Elm', created_by: '1' } }\n        run_test!\n      end\n    end\n  end\n\n  path '\/todos\/{id}' do\n    parameter name: 'id', in: :path, type: :integer, description: 'id'\n\n    get('show todo') do\n      tags 'Todos'\n      response(200, 'successful') do\n        let(:id) { 5 }\n        # after do |example|\n        #   example.metadata&#91;:response]&#91;:examples] = { 'application\/json' => JSON.parse(response.body, symbolize_names: true) }\n        # end\n        run_test!\n      end\n    end\n\n    put('update todo') do\n      tags 'Todos'\n      parameter name: :todo, in: :body, schema: {\n        type: :object,\n        properties: {\n          title: { type: :string },\n          content: { type: :string }\n        }\n      }\n      response(204, \"successful\") do\n        let(:id) { 5 }\n        run_test!\n      end\n    end\n\n    delete('delete todo') do\n      tags 'Todos'\n      response(204, \"successful\") do\n        let(:id) { 5 }\n        run_test!\n      end\n    end\n  end\n<\/code><\/pre>\n\n\n\n<p>Also, add these lines to spec\/requests\/items_spec.rb, again just before the final end:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  path '\/todos\/{todo_id}\/items' do\n\n    parameter name: 'todo_id', in: :path, type: :integer, description: 'todo_id'\n\n    get('list items') do\n      tags 'Items'\n      response(200, 'success') do\n        run_test!\n      end\n    end\n\n    post('create item') do\n      tags 'Items'\n      consumes 'application\/json'\n      produces 'application\/json'\n      parameter name: :item, in: :body, required: true, schema: {\n        type: :object,\n        required: %i&#91;name],\n        properties: {\n          name: {type: :string},\n          done: {type: :boolean}\n        }\n      }\n      response(201, 'success') do\n        let(:item) { { name: 'thisitem', done: false } }\n        run_test!\n      end\n    end\n  end\n\n  path '\/todos\/{todo_id}\/items\/{id}' do\n    parameter name: 'todo_id', in: :path, type: :integer, description: 'todo_id'\n    parameter name: 'id', in: :path, type: :integer, description: 'id'\n\n    get('show item') do\n      tags 'Items'\n      response(200,'success') do\n        run_test!\n      end\n    end\n\n    put('update item') do\n      tags 'Items'\n      consumes 'application\/json'\n      produces 'application\/json'\n      parameter name: :item, in: :body, required: true, schema: {\n        type: :object,\n        properties: {\n          name: {type: :string},\n          done: {type: :boolean}\n        }\n      }\n      response(204,'success') do\n        let(:item) { { name: 'changedName'} }\n        run_test!\n      end\n    end\n\n    delete('delete item') do\n      tags 'Items'\n      response(204,'success') do\n        run_test!\n      end\n    end\n\n  end\n<\/code><\/pre>\n\n\n\n<p>Finally, edit spec\/swagger_helper.rb so that the servers section reads as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>  servers: &#91;\n    {\n      url: \"#{ENV&#91;'APPLICATION_URL']}\"\n    }\n  ]<\/code><\/pre>\n\n\n\n<p>When you get all done with this, run<\/p>\n\n\n\n<p>bundle exec rspec<\/p>\n\n\n\n<p>To make sure that the test suites still work.  Then type<\/p>\n\n\n\n<p>bundle exec rake rswag:specs:swaggerize<\/p>\n\n\n\n<p>Then start your server as usual.  You will find that you have a new route, so that you can, from your browser, access http:\/\/localhost:3000\/api-docs . Experiment with this page, trying out the various APIs and creating and updating todo and item entries.<\/p>\n\n\n\n<h2>AJAX<\/h2>\n\n\n\n<p>Now we will call the API using AJAX, from a front end application.  There are several steps needed to get ready.  <\/p>\n\n\n\n<p>First, for those running Vagrant, you will have to edit your Vagrantfile, add a line at the bottom just before the final end, and restart Vagrant.  You exit your vagrant ssh session and then do a vagrant halt, followed by a vagrant up after the Vagrantfile has been edited.  The line you add is:<\/p>\n\n\n\n<p>config.vm.network :forwarded_port, guest: 3001, host: 3001, host_ip: &#8220;127.0.0.1&#8221;<\/p>\n\n\n\n<p>Second, we need to add an additional gem to our todos-api application, and change a configuration file.  This is for security reasons having to do with something called CORS, or cross origin resource sharing.  You add this line to your Gemfile:<\/p>\n\n\n\n<p>gem &#8216;rack-cors&#8217;<\/p>\n\n\n\n<p>Add it above the development, test section.  Then you do bundle install.  Then you add the following lines to config\/application.rb:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>    config.middleware.insert_before 0, \"Rack::Cors\" do\n      allow do\n        origins 'http:\/\/localhost:3000'\n        resource(\n          '*',\n          headers: :any,\n          methods: &#91;:get, :patch, :put, :delete, :post, :options]\n          )\n      end\n    end<\/code><\/pre>\n\n\n\n<p>These should be added just before the second to the last end statement in the file.<\/p>\n\n\n\n<p>Now, you clone the following workspace for the ajax-sample application <strong><a href=\"https:\/\/classroom.github.com\/a\/XLzZQLKs\">here.<\/a><\/strong>  This sample application is fully functional but limited.  Now you start BOTH applications.  For todos-api, you start it as follows:<\/p>\n\n\n\n<p>bin\/rails s -p 3001<\/p>\n\n\n\n<p>Or, if you are running vagrant:<\/p>\n\n\n\n<p>bin\/rails s -b 0.0.0. 0 -p 3001<\/p>\n\n\n\n<p>For ajax-sample, you let it default to use port 3000:<\/p>\n\n\n\n<p>bin\/rails s<\/p>\n\n\n\n<p>or if you are running vagrant:<\/p>\n\n\n\n<p>bin\/rails s -b 0.0.0.0<\/p>\n\n\n\n<p>Now open the browser to localhost:3000.  You will see a very basic page, On one line is a pushbutton to list the todos.  If you push the button, an AJAX request is sent to retrieve the todo entries from the API application, and it comes back in JSON (looking kind of ugly).  On another line is two entry fields and another pushbutton to create a todo.  If you fill out the fields and push the the second button, it will create a todo and show the todo it created, again in JSON.<\/p>\n\n\n\n<p>Study the javascript in the ajax-sample file app\/views\/ajax\/home.html.erb .  You will see that it creates a click event listener for the button, and then when it is clicked, it generates an XMLHttpRequest (AJAX), which causes the list of todos to be retrieved.   Further, you will see an event listener for the second button.  You will see that it also generates an Ajax request, this one to create a new todo.  This second one posts a JSON body.<\/p>\n\n\n\n<h2>AJAX Assignment<\/h2>\n\n\n\n<p>Extend the home.html.erb file.  Add an entry field and a second pushbutton for list items..  The entry field should be for the id of a todo entry.  When the second pushbutton is clicked, it should retrieve all the items belonging to that todo entry, via an AJAX request.  You will have to send the AJAX request to the URL http:\/\/localhost:3000\/todos\/todo_id\/items where todo_id is the id from the entry field.<\/p>\n\n\n\n<p>Once you get this working, extend the home.html.erb file further.  Add entry fields for name and todo_id, and a checkbox for the boolean done, as well as a pushbutton for create item.  You want to create an item belonging to the todo in the todo_id.  You will need to send a POST request to the same URL as for the item list request, with a JSON encoded body for the item object to be created.  Note that the todo_id is not in the JSON body because it is in the URL.<\/p>\n\n\n\n<p>This reference may be helpful: <a href=\"https:\/\/www.sitepoint.com\/guide-vanilla-ajax-without-jquery\/\">https:\/\/www.sitepoint.com\/guide-vanilla-ajax-without-jquery\/<\/a> <\/p>\n\n\n\n<p><\/p>\n","protected":false},"excerpt":{"rendered":"<p>For this lesson, we will do part 1 of this tutorial: https:\/\/scotch.io\/tutorials\/build-a-restful-json-api-with-rails-5-part-one . An initial workspace with the starter version of the Rails application is available here. Introductory Reading We are going to create an API that communicates using REST protocols, and that exchanges JSON data. It&#8217;s a good idea to understand what REST is:<\/p>\n","protected":false},"author":5,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":{"_genesis_hide_title":false,"_genesis_hide_breadcrumbs":false,"_genesis_hide_singular_image":false,"_genesis_hide_footer_widgets":false,"_genesis_custom_body_class":"","_genesis_custom_post_class":"","_genesis_layout":"","_vp_format_video_url":"","_vp_image_focal_point":[]},"featured_image_src":null,"featured_image_src_square":null,"_links":{"self":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/pages\/433"}],"collection":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/users\/5"}],"replies":[{"embeddable":true,"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/comments?post=433"}],"version-history":[{"count":0,"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/pages\/433\/revisions"}],"wp:attachment":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/media?parent=433"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}