{"id":601,"date":"2020-10-22T09:19:40","date_gmt":"2020-10-22T13:19:40","guid":{"rendered":"https:\/\/learnctd.wpengine.com\/?page_id=601"},"modified":"2020-10-22T09:19:41","modified_gmt":"2020-10-22T13:19:41","slug":"fullstack-rubrik","status":"publish","type":"page","link":"https:\/\/learn.codethedream.org\/fullstack-rubrik\/","title":{"rendered":"Fullstack &#8211; Rubrik"},"content":{"rendered":"\n<h3>\u00a0\u00a0\u00a0\u00a0\u00a0Rubrik <\/h3>\n\n\n\n<ol><li>Either <a href=\"\/back-end-2-final-project\">Rails<\/a> or <a href=\"\/front-end-react-js-final-project\/\">React<\/a> Rubrik<\/li><li>Build a separate Rails API application and React front-end that consumes and provides data to and from RAILS API<\/li><li>Contains authentication, multiple data models.<\/li><li>Code for both apps stored in GIT, with a separate repo for each<\/li><li>Using a variety of data types: integer, string, boolean, and perhaps others<\/li><li>With validations in each model to minimize the creation of invalid records<\/li><li>Views should include forms for the CRUD operations, and those for new and edit operations should include a variety of controls<\/li><li>Form controls should include several types of input fields.\u00a0 You might use text fields, drop-down lists, checkboxes, radio buttons, and\/or others, and there should be some links to connect the application together.\u00a0<\/li><li>If what the user enters is not valid or some other failure occurs, there should be error handling and appropriate messages should be shown.<\/li><li>The application should be styled to be attractive, with inclusion of images, color, fonts, and other css,scss, or styled components\u00a0<\/li><li>You should have Rspec tests for at least some of the CRUD operations and for\u00a0 the models.<\/li><\/ol>\n\n\n\n<p><strong>Bonus<\/strong>: Deploy backend to heroku or digital ocean and front-end to Netlify or other continuous deployment platform<\/p>\n","protected":false},"excerpt":{"rendered":"<p>\u00a0\u00a0\u00a0\u00a0\u00a0Rubrik Either Rails or React Rubrik Build a separate Rails API application and React front-end that consumes and provides data to and from RAILS API Contains authentication, multiple data models. Code for both apps stored in GIT, with a separate repo for each Using a variety of data types: integer, string, boolean, and perhaps others<\/p>\n","protected":false},"author":8,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":{"_genesis_hide_title":false,"_genesis_hide_breadcrumbs":false,"_genesis_hide_singular_image":false,"_genesis_hide_footer_widgets":false,"_genesis_custom_body_class":"","_genesis_custom_post_class":"","_genesis_layout":"","_vp_format_video_url":"","_vp_image_focal_point":[]},"featured_image_src":null,"featured_image_src_square":null,"_links":{"self":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/pages\/601"}],"collection":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/users\/8"}],"replies":[{"embeddable":true,"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/comments?post=601"}],"version-history":[{"count":0,"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/pages\/601\/revisions"}],"wp:attachment":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/media?parent=601"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}