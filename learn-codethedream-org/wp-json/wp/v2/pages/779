{"id":779,"date":"2020-12-26T19:14:06","date_gmt":"2020-12-27T00:14:06","guid":{"rendered":"https:\/\/learnctd.wpengine.com\/?page_id=779"},"modified":"2020-12-27T11:57:05","modified_gmt":"2020-12-27T16:57:05","slug":"rails-basic-skills-error-handling","status":"publish","type":"page","link":"https:\/\/learn.codethedream.org\/rails-basic-skills-error-handling\/","title":{"rendered":"Rails Basic Skills: Error Handling"},"content":{"rendered":"\n<p>Edit app\/controllers\/customers_controller.rb.&nbsp; You will see a create and an update method.&nbsp; We won\u2019t explain their current contents right now, because we are going to change them. Comment all the lines out between the def and the end for the create method.&nbsp; Do the same for the update method.  Your editor will have key sequences to comment out a bunch of lines.  For example, in the atom editor, you select the lines and then do ctrl-\/ or cmd-\/ on the mac to comment out those lines.<\/p>\n\n\n\n<p>Now in the create method, put these lines:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>@customer = Customer.new(customer_params)\n@customer.save\nflash.notice = \"The customer record was created successfully.\"\nredirect_to @customer<\/code><\/pre>\n\n\n\n<p>In the update method, put these lines:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>@customer.update(customer_params)\r\nflash.notice = \"The customer record was updated successfully.\"\r\nredirect_to @customer\r<\/code><\/pre>\n\n\n\n<p>These will make the functions work, but without error processing.\u00a0 Now, if you try to create a customer with blank fields, it will not give error messages.\u00a0 It won\u2019t actually create the record, but it will tell you that it succeeded.\u00a0 (By the way, the flash.notice is displayed by the line at the top of app\/views\/customers\/index.html.erb , where it puts out notice.)<\/p>\n\n\n\n<h2>Checking for Errors and Handling Them<\/h2>\n\n\n\n<p>We need to get our error messages back.\u00a0 Basically, if @customer.save succeeds, it will return the @customer object, updated with the newly created id.\u00a0 If it fails, typically because validation fails, it returns nil &#8212; and then we have to handle the error.\u00a0 The same is true of the update function.<\/p>\n\n\n\n<h2>The create Method With Error Handling<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>def create\r\n    @customer = Customer.new(customer_params)\r\n    if @customer.save\r\n      flash.notice = \"The customer record was created successfully.\"\r\n      redirect_to @customer\r\n    else\r\n      flash.now.alert = @customer.errors.full_messages.to_sentence\r\n      render :new  \r\n    end\r\n  end\r<\/code><\/pre>\n\n\n\n<h2>The update Method With Error Processing<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code> def update\r\n    if @customer.update(customer_params)\r\n      flash.notice = \"The customer record was updated successfully.\"\r\n      redirect_to @customer\r\n    else\r\n      flash.now.alert = @customer.errors.full_messages.to_sentence\r\n      render :edit\r\n    end\r\n  end\r\n<\/code><\/pre>\n\n\n\n<p>If @customer.save or @customer.update return non-nil values, that means they succeeded, and we can redirect back to the show page with a success message.\u00a0 If they return nil, we have the else processing: First collect the error and put it in the flash.now.alert.\u00a0 Then do the render, which basically means put the previous screen back up.\u00a0 Note that you use flash.now.alert when you do a render, and flash.alert when you do a redirect.\u00a0 This is too complicated to explain, but just put the \u2018now\u2019 in when you do a render.\u00a0 Note also, you should never have a code path that does several renders or several redirects, or several of each.\u00a0 For each invocation of a controller method, you only want one of these to happen.<\/p>\n\n\n\n<h2>Additional Methods in the Customer Model Class<\/h2>\n\n\n\n<p>We added a full_name method to the Customer model class.\u00a0 Additional methods in model classes can be convenient.\u00a0 This will show how. Edit app\/views\/customers\/index.html.erb .\u00a0 Change these two lines:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;th>First name&lt;\/th>\r\n&lt;th>Last name&lt;\/th>\r<\/code><\/pre>\n\n\n\n<p>to this:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;th> Full name&lt;\/th><\/code><\/pre>\n\n\n\n<p>Then change these two lines:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;td>&lt;%= customer.first_name %>&lt;\/td>\r\n&lt;td>&lt;%= customer.last_name %>&lt;\/td>\r<\/code><\/pre>\n\n\n\n<p>\u00a0\u00a0To<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;td>&lt;%= customer.full_name %>&lt;\/td><\/code><\/pre>\n\n\n\n<p>This last line calls the full_name method we added to the Customer model class.  Now go to the \/customers url and you will see the difference.<\/p>\n\n\n\n<p>(Time to save your work to github!)<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Edit app\/controllers\/customers_controller.rb.&nbsp; You will see a create and an update method.&nbsp; We won\u2019t explain their current contents right now, because we are going to change them. Comment all the lines out between the def and the end for the create method.&nbsp; Do the same for the update method. Your editor will have key sequences to<\/p>\n","protected":false},"author":5,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":{"_genesis_hide_title":false,"_genesis_hide_breadcrumbs":false,"_genesis_hide_singular_image":false,"_genesis_hide_footer_widgets":false,"_genesis_custom_body_class":"","_genesis_custom_post_class":"","_genesis_layout":"","_vp_format_video_url":"","_vp_image_focal_point":[]},"featured_image_src":null,"featured_image_src_square":null,"_links":{"self":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/pages\/779"}],"collection":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/users\/5"}],"replies":[{"embeddable":true,"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/comments?post=779"}],"version-history":[{"count":0,"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/pages\/779\/revisions"}],"wp:attachment":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/media?parent=779"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}