{"id":778,"date":"2020-12-26T18:06:41","date_gmt":"2020-12-26T23:06:41","guid":{"rendered":"https:\/\/learnctd.wpengine.com\/?page_id=778"},"modified":"2021-01-17T19:33:02","modified_gmt":"2021-01-18T00:33:02","slug":"rails-basic-skills-validation","status":"publish","type":"page","link":"https:\/\/learn.codethedream.org\/rails-basic-skills-validation\/","title":{"rendered":"Rails Basic Skills: Validation"},"content":{"rendered":"\n<p>So far, we have talked about byebug, exception handling, logging, layouts, flash messages, and styles.\u00a0 Validation is next.\u00a0 Try this: Create several customers with blank first names or last names or phone numbers with letters in them or with email addresses that don\u2019t have an @ sign.\u00a0 You will see that it just creates these nonsense entries.\u00a0 We wouldn\u2019t want this in a production application. We want the entries to be validated so that they make sense.<\/p>\n\n\n\n<p>Edit app\/models\/customer.rb.  It should be changed to look like this:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Customer &lt; ApplicationRecord\n validates :first_name, presence: true\n validates :last_name, presence: true\n validates :phone,  presence: true\n validates :phone, numericality: { only_integer: true }\n validates :phone, length: { is: 10}\n validates :email, presence: true\n validates_format_of :email, :with => \/\\A(&#91;^@\\s]+)@((?:&#91;-a-z0-9]+\\.)+&#91;a-z]{2,})\\Z\/i\n\n\n def full_name\n   \"#{first_name} #{last_name}\"\n end\nend\n<\/code><\/pre>\n\n\n\n<h2>Explaining the Code<\/h2>\n\n\n\n<p>We have added validators, as described here: <a href=\"https:\/\/guides.rubyonrails.org\/active_record_validations.html\">https:\/\/guides.rubyonrails.org\/active_record_validations.html<\/a> . The presence validator means that the entry can\u2019t be blank.&nbsp; The numericality validator for the phone means that only digits are accepted.&nbsp; The length validator for the phone means that it must be 10 digits.&nbsp; For the email, we are doing validation with a regular expression.&nbsp; We won\u2019t explain regular expressions now, but this one checks that the email is syntactically valid.<\/p>\n\n\n\n<p>Note: Validators do not correct entries that are already in the database.&nbsp; It only prevents new ones or updated ones from being incorrect.<\/p>\n\n\n\n<p>The full_name method is not a validator.&nbsp; We\u2019ll use that for something else.<\/p>\n\n\n\n<h2>Trying the New Validators<\/h2>\n\n\n\n<p>Restart the server with the new code, and try to create a customer record with everything blank.&nbsp; You will see this message:<\/p>\n\n\n\n<p><img loading=\"lazy\" width=\"309px;\" height=\"344px;\" src=\"https:\/\/lh6.googleusercontent.com\/usHVISfYUalbRFjhJ6_OzSHMhoOB56u58bp7VirGfSbrKdyMPv7go3-3TDhsZOGL1QvcFIyvcYCG0X3UAe22N45DCrR-nNMDtrr9PSYOFa1yKiIK82VzdRfA7sFRoftvjRrhAI_d47s\"><\/p>\n\n\n\n<h2>How These Messages Come Up<\/h2>\n\n\n\n<p>When the save is attempted for the new customer object, the validators run.&nbsp; If any of the validations fail, the record is not written to the database.&nbsp; Instead, error information, including messages, is stored in the customer object, so that they can be reported to the user.&nbsp; Suppose the object to be saved is @customer.&nbsp; Then @customer.errors.full_messages contains an array of messages about the failures.<\/p>\n\n\n\n<p>Now look at app\/views\/customers\/_form.html.erb .&nbsp; You will see a block at the start that starts if customer.errors.any? .&nbsp; This is the block that displays the error messages.<\/p>\n\n\n\n<p>This error handling is provided because we generated the scaffold for customers.  You will need to know how to code error handling within your controller, which is the subject of the next section.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>So far, we have talked about byebug, exception handling, logging, layouts, flash messages, and styles.\u00a0 Validation is next.\u00a0 Try this: Create several customers with blank first names or last names or phone numbers with letters in them or with email addresses that don\u2019t have an @ sign.\u00a0 You will see that it just creates these<\/p>\n","protected":false},"author":5,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":{"_genesis_hide_title":false,"_genesis_hide_breadcrumbs":false,"_genesis_hide_singular_image":false,"_genesis_hide_footer_widgets":false,"_genesis_custom_body_class":"","_genesis_custom_post_class":"","_genesis_layout":"","_vp_format_video_url":"","_vp_image_focal_point":[]},"featured_image_src":null,"featured_image_src_square":null,"_links":{"self":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/pages\/778"}],"collection":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/users\/5"}],"replies":[{"embeddable":true,"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/comments?post=778"}],"version-history":[{"count":0,"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/pages\/778\/revisions"}],"wp:attachment":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/media?parent=778"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}