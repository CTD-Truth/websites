{"id":808,"date":"2021-01-13T13:56:08","date_gmt":"2021-01-13T18:56:08","guid":{"rendered":"https:\/\/learnctd.wpengine.com\/?page_id=808"},"modified":"2022-01-31T18:01:01","modified_gmt":"2022-01-31T23:01:01","slug":"rails-ajax-calling-rest","status":"publish","type":"page","link":"https:\/\/learn.codethedream.org\/rails-ajax-calling-rest\/","title":{"rendered":"Rails: AJAX Calling REST"},"content":{"rendered":"\n<p>Now we will call the API using AJAX, from a front end application.  We will create this front end application using Rails.  In practice, Rails is not used to create front ends.  Instead, a front end framework such as React is used.  This lesson explains how it works, without requiring that you know React.  However, this lesson does require knowledge of javascript, in particular to access and manipulate the DOM and to access APIs using fetch().<\/p>\n\n\n\n<p>As the previous lesson was a long one, this lesson is optional, but it will help you understand how front end applications access a Rails API.  <\/p>\n\n\n\n<p>There are several steps needed to get ready.  <\/p>\n\n\n\n<h2>The Starter AJAX Application<\/h2>\n\n\n\n<p>Fork and clone the following git repository for the ajax sample application <strong><a rel=\"noreferrer noopener\" href=\"https:\/\/github.com\/Code-the-Dream-School\/R6-rails-ajax\" target=\"_blank\">here.<\/a><\/strong>  This sample application is fully functional but limited.  You need to run bundle install and yarn install as usual. Now you start BOTH the the rest and the the ajax sample applications, but you start them on different ports.  You will need two command line windows open, or if running vagrant, two vagrant ssh sessions.  You start the rest application using:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>bin\/rails s -p 3001<\/code><\/pre>\n\n\n\n<p>Or, if you are running vagrant:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>bin\/rails s -b 0.0.0.0 -p 3001<\/code><\/pre>\n\n\n\n<p>For the ajax sample application, you let it default to use port 3000:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>bin\/rails s<\/code><\/pre>\n\n\n\n<p>or if you are running vagrant:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>bin\/rails s -b 0.0.0.0<\/code><\/pre>\n\n\n\n<p>Now open the browser to localhost:3000.  You will see a very basic page, which is not styled at all.  The default (session) page allows user enrollment, user logon, and user logoff.  The members and facts page allows CRUD operations for members.  You will extend this to implement additional CRUD operations for members and facts.<\/p>\n\n\n\n<p>Use the session page to log in a user, using one of the users you created in a previous step.  Then go to the members and facts page and list members.  If you try to list members without logging in, you will get a 401 return code, indicating that you are not authenticated.<\/p>\n\n\n\n<p>The HTML for this application is in app\/views\/ajax\/home.html.erb and app\/views\/ajax\/session.html.erb.  The first of these pages calls app\/javascript\/packs\/ajax_ops.js.  The second page calls app\/javascript\/packs\/session_ops.js.  Your assignment will involve extending home.html.erb and ajax_ops.js.<\/p>\n\n\n\n<p>Study the javascript in ajax_ops.js.  You will see that it creates a click event listener for the div containing each button.  Within the event listener is logic to check which button was clicked (the event.target).  , and then when one is clicked, it causes a javascript fetch request.  If the fetch is a POST or a PUT, a JSON body is included with the request.  When the request completes, the result is sent to the screen, or an error is given in an alert.  Because these requests require authentication, the authorization header is included with the request.  The value of the authorization header is derived from the logon.  You can see how by looking at the logon operation in session_ops.js.<\/p>\n\n\n\n<h2>AJAX Assignment<\/h2>\n\n\n\n<p>Create a git branch called ajax.  This is where you will put the code changes for your lesson.<\/p>\n\n\n\n<p>Extend the home.html.erb file.  Add another line, on which you would have an entry field for member_id and a button for Delete Member.  Add logic to the app\/assets\/javascripts\/ajax_ops.js so that you can delete a member entry.  You can use the existing event listener, with the new target being the delete button you create.  This is similar to the update logic, but the method is &#8216;DELETE&#8217; and there is no body to the request.  You still have to specify the authentication header.  Test it out to be sure it works.<\/p>\n\n\n\n<p>Extend the home.html.erb file further.  Add another entry field and button for list facts.  The entry field should be for the id of a member entry.  When the second pushbutton is clicked, it should retrieve all the facts belonging to that member entry, via an AJAX request.  You will have to send the AJAX request to the URL http:\/\/localhost:3001\/members\/member_id\/facts where member_id is  from the corresponding entry field.<\/p>\n\n\n\n<p>Once you get this working, extend the home.html.erb file further.  Add entry fields for member_id, fact, and likes, as well as a pushbutton for create fact.  You want to create a fact belonging to the member specified by the member_id.  You will need to send a POST request to the same URL as for the fact list request, with a JSON encoded body for the fact object to be created.  Note that the member_id is not in the JSON body because it is in the URL.<\/p>\n\n\n\n<p>Once that is working, add code to update and delete fact entries, and test those changes too.<\/p>\n\n\n\n<p>When all is working, push your ajax branch to github and create a pull request.<\/p>\n\n\n\n<p>This reference may be helpful: <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Fetch_API\/Using_Fetch\">https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Fetch_API\/Using_Fetch<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Now we will call the API using AJAX, from a front end application. We will create this front end application using Rails. In practice, Rails is not used to create front ends. Instead, a front end framework such as React is used. This lesson explains how it works, without requiring that you know React. However,<\/p>\n","protected":false},"author":5,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":{"_genesis_hide_title":false,"_genesis_hide_breadcrumbs":false,"_genesis_hide_singular_image":false,"_genesis_hide_footer_widgets":false,"_genesis_custom_body_class":"","_genesis_custom_post_class":"","_genesis_layout":"","_vp_format_video_url":"","_vp_image_focal_point":[]},"featured_image_src":null,"featured_image_src_square":null,"_links":{"self":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/pages\/808"}],"collection":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/users\/5"}],"replies":[{"embeddable":true,"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/comments?post=808"}],"version-history":[{"count":0,"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/pages\/808\/revisions"}],"wp:attachment":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/media?parent=808"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}