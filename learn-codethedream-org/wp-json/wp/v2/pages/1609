{"id":1609,"date":"2022-04-19T15:51:15","date_gmt":"2022-04-19T19:51:15","guid":{"rendered":"https:\/\/learn.codethedream.org\/?page_id=1609"},"modified":"2022-07-03T16:41:16","modified_gmt":"2022-07-03T20:41:16","slug":"ctd-node-express-class-lesson-4-middleware-rest-methods-and-postman","status":"publish","type":"page","link":"https:\/\/learn.codethedream.org\/ctd-node-express-class-lesson-4-middleware-rest-methods-and-postman\/","title":{"rendered":"CTD Node\/Express Class Lesson 4: Middleware, REST Methods, and Postman"},"content":{"rendered":"\n<h2><strong>Learning Materials<\/strong><\/h2>\n\n\n\n<p><strong>Understanding Middleware<\/strong><\/p>\n\n\n\n<p>Middleware is a critical part of all Express applications.  This link: <a rel=\"noreferrer noopener\" href=\"https:\/\/expressjs.com\/en\/guide\/writing-middleware.html\" target=\"_blank\">https:\/\/expressjs.com\/en\/guide\/writing-middleware.html<\/a> explains the use of middleware, so you should review it before proceeding with the lesson.<\/p>\n\n\n\n<p><strong>Continuing with the Video<\/strong><\/p>\n\n\n\n<p>You continue watching <strong><a href=\"https:\/\/youtu.be\/Oe421EPjeBE?t=22246\">this video<\/a><\/strong>.  This week, you watch from 6:10:46 of the video to the end. The initial focus is on middleware.  Then each of the HTTP methods involved in API development are covered: GET, POST, PUT, PATCH, and DELETE.  As routes for each of these API methods are implemented, you will test them using Postman.  You then refactor the code, to separate out the router and controller functions.<\/p>\n\n\n\n<p>The front end calls the APIs in two ways, first as browser GET and POST requests coming from a standard HTML page, and second via JavaScript in the browser that issues GET, POST, PUT, and DELETE requests. You find the front end in the methods-public directory. Study this file. It shows you how to call the back end from the front end, using either ordinary HTML or JavaScript. When ordinary HTML is used, only GET and POST requests are supported, because those are the only operations a browser can do, and the post request sends form-encoded data. When JavaScript is used, all HTTP operations are supported, and JSON is used to send and receive data. Parsing of the body of the request, for form-encoded and JSON data, is explained in the video.<\/p>\n\n\n\n<p>In practice, it is not practical always to create a front end in order to test a back end, so we use Postman, which you should have already installed. Postman can send all the standard HTTP request operations and can parse the data returned. Be sure you understand the use of Postman and duplicate the tests that the instructor performs with Postman, because you will need to use it extensively in the lessons to come.<\/p>\n\n\n\n<h2><strong>Assignments<\/strong><\/h2>\n\n\n\n<p><strong>Coding Assignment<\/strong><\/p>\n\n\n\n<p>For this lesson, you continue to work in the node-express-course\/02-express-tutorial directory.  As usual, you should use git to switch to a new branch, the week4 branch, before you start your work.<\/p>\n\n\n\n<p>Once APIs are built, one will typically create a front end, which calls the APIs using JavaScript fetch operations or Axios function calls.  For the APIs you build in this lesson, the instructor provides a front end.  &nbsp;This is accessible from the browser, when the server is running, at localhost:3000, after you have completed all the steps up to 6:53:25 of the video. That is the point where the instructor adds this line to app.js. <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>app.use(express.static('.\/methods-public'))<\/code><\/pre>\n\n\n\n<p>The audio portion of the video is not quite in sync with the video portion &#8212; it lags by about 3 seconds &#8212; but this is only a minor annoyance.<\/p>\n\n\n\n<p>You duplicate the work of the instructor.  In the process, you create the following programs:<\/p>\n\n\n\n<ul><li>08-middleware-basic.js<\/li><li>09-middleware-use.js<\/li><li>10-middleware-options.js<\/li><li>11-methods.js<\/li><li>12-route-app.js<\/li><li>routes\/people.js<\/li><li>routes\/auth.js<\/li><li>controllers\/people.js<\/li><\/ul>\n\n\n\n<p>The instructor again follows the pattern that he does the work in app.js and periodically copies it to one of these other names. The answers are in the 02-express-tutorial\/final directory &#8212; but try to do your own work.  &nbsp;For the answers in the final directory, the instructor has renamed router\/people.js to 13-router-people.js, routes\/auth.js to 14-router-auth.js, and controllers\/people.js to 15-router-controller.js.<\/p>\n\n\n\n<p><strong>Additional Assignment: Practice Middleware<\/strong><\/p>\n\n\n\n<p>Create a file practice-middleware.js.  In it, create a middleware function called consoleLog(req, res, next) that logs a statement to the console and then invokes the next function.  Export this function.  Edit practice-express.js to require the consoleLog function, and add an app.use statement so that it is invoked before every request.  Test the practice-express.js program to make sure the middleware is working, accessing your express program from the browser using localhost:3000 as before.<\/p>\n\n\n\n<p><strong>Mindset Assignment<\/strong><\/p>\n\n\n\n<p>Your mindset assignment this week can be found here: <strong><a href=\"https:\/\/learn.codethedream.org\/mindset-curriculum-comfort-with-the-unknown\/\" target=\"_blank\" rel=\"noreferrer noopener\">Comfort with the Unknown<\/a><\/strong><\/p>\n\n\n\n<p><\/p>\n\n\n\n<h2 id=\"submitting-your-work\"><strong>Submitting Your Work<\/strong><\/h2>\n\n\n\n<p>When you are done, do the following, use the same procedure as for previous lessons. You do a git add, git commit, and git push for the week4 branch, create your pull request on github, and put a link to your pull request in your assignment submission form below.<\/p>\n\n\n\n<p><strong>When you\u2019ve completed your Coding Assignment and Mindset Assignment submit ALL of your work using the&nbsp;<a href=\"http:\/\/tiny.cc\/squibby2\">Squibby 2.0 Assignment Submission Form<\/a><\/strong><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Learning Materials Understanding Middleware Middleware is a critical part of all Express applications. This link: https:\/\/expressjs.com\/en\/guide\/writing-middleware.html explains the use of middleware, so you should review it before proceeding with the lesson. Continuing with the Video You continue watching this video. This week, you watch from 6:10:46 of the video to the end. The initial focus<\/p>\n","protected":false},"author":5,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":{"_genesis_hide_title":false,"_genesis_hide_breadcrumbs":false,"_genesis_hide_singular_image":false,"_genesis_hide_footer_widgets":false,"_genesis_custom_body_class":"","_genesis_custom_post_class":"","_genesis_layout":"","_vp_format_video_url":"","_vp_image_focal_point":[]},"featured_image_src":null,"featured_image_src_square":null,"_links":{"self":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/pages\/1609"}],"collection":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/users\/5"}],"replies":[{"embeddable":true,"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/comments?post=1609"}],"version-history":[{"count":0,"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/pages\/1609\/revisions"}],"wp:attachment":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/media?parent=1609"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}