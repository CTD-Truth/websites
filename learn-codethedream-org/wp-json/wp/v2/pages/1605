{"id":1605,"date":"2022-04-18T12:23:10","date_gmt":"2022-04-18T16:23:10","guid":{"rendered":"https:\/\/learn.codethedream.org\/?page_id=1605"},"modified":"2022-04-18T12:23:11","modified_gmt":"2022-04-18T16:23:11","slug":"node-express-final-project-server-side-rendering","status":"publish","type":"page","link":"https:\/\/learn.codethedream.org\/node-express-final-project-server-side-rendering\/","title":{"rendered":"Node\/Express Final Project: Server Side Rendering"},"content":{"rendered":"\n<h2>Developing Your Own Express Application<\/h2>\n\n\n\n<p>For the final project, you will each design and develop your own Express application.&nbsp; You will have two weeks to complete the project.&nbsp; As that is a short time for a fully functional application, the applications will have to be relatively simple, with only a few features implemented.<\/p>\n\n\n\n<p>For students who would like to become interns with Code the Dream, the final project is very important, because it is the best indication of how well you would succeed as an intern.<\/p>\n\n\n\n<h2>Goal of the Application<\/h2>\n\n\n\n<p>The goal of the project is to showcase what you have learned during class. You will have the opportunity to demonstrate your knowledge and creativity. You are required to create an Express application from scratch. A proposal for what your application will do is required to be submitted before you start working on the project.<\/p>\n\n\n\n<h2>Before You Start<\/h2>\n\n\n\n<p>Please discuss your proposal with us.&nbsp; You will fill out a form to describe your proposal, saying what you would like to do.&nbsp; We will evaluate the proposal to make sure:<\/p>\n\n\n\n<ul><li>That it is doable in the allotted time.&nbsp; If the project seems too complicated, we may suggest that it be limited to just a few features.<\/li><li>That it demonstrates the skills you have learned in the class series so far.&nbsp; It should not be so simple that it doesn\u2019t show key skills.&nbsp;&nbsp;<\/li><li>That it gives you an opportunity to demonstrate creativity, which is important for a developer.<\/li><\/ul>\n\n\n\n<p>You may find that you want to use some concepts, technologies, or npm packages we didn\u2019t cover, which is worth some extra points so long as it doesn\u2019t get too hard.<\/p>\n\n\n\n<p>Although you will need to keep your final project simple, think about an application you might want to create eventually.  Perhaps you could implement some subset or feature of this future application.<\/p>\n\n\n\n<h2>Be Careful with Your MongoDB Password<\/h2>\n\n\n\n<p>Do not include the MongoDB URI in your code, even temporarily.  Use the dotenv NPM package so that it can be stored in a .env file.  Be sure you have a .gitignore file so that the .env file and the node_modules directory are not delivered to Github or Heroku.<\/p>\n\n\n\n<h2>Requirements for the Project (Rubric)<\/h2>\n\n\n\n<ol><li>Create a full Node\/Express application from scratch using the MongoDB database. It must contain the following elements:&nbsp;<\/li><\/ol>\n\n\n\n<h4>Models &amp; Controllers<\/h4>\n\n\n\n<ol start=\"2\"><li>At least two Mongoose data models.  One of these must be a User data model, as you need to implement logon. <\/li><li>Implement user registration and logon.  Authentication must use Passport.  Passwords must be stored hashed.<\/li><li>Model attributes should use several different data types (number, string, boolean, date, array etc.).<\/li><li>Include validation of your attributes to prevent the creation of invalid records.<\/li><li>For any models beside the User model, implement all the CRUD (create, read, update, delete) operations in your controllers.<\/li><li><strong>Bonus<\/strong>: implement some non-CRUD operations (like sorting, paging, etc.).<\/li><li>Implement routes and controller operations so that registration, logon, and all CRUD operations can be performed.  You do not implement APIs.  Instead you implement methods that render EJS templates.<\/li><li>Implement access control middleware so that at least the new\/edit\/create\/update\/delete operations require authentication.  You can have unauthenticated read operations if you choose.<\/li><li>Implement error handling middleware so that appropriate status codes and error messages are returned to the caller as operations are performed and if errors occur.  When performing a redirect, you will need to store the message for the user in the session, and you will need to check that session for messages when views are displayed.<\/li><\/ol>\n\n\n\n<h4>Views<\/h4>\n\n\n\n<ol start=\"11\"><li>Using EJS templates, implement views for user registration and logon.  Include a link on for logoff on other pages.<\/li><li>Using EJS templates, implement views for the CRUD operations for each model:<ul><li>Index &#8211; view to list all the records for that model, including buttons or links for show, edit, and delete.<\/li><li>New &#8211; form to create a new record<\/li><li>Edit &#8211; form to update an existing record<\/li><li>Show &#8211; view to see a specific record<\/li><\/ul><\/li><li>Form controls should include several types of input fields, which might include inputs, textareas, dropdowns, checkboxes, and radio buttons.<\/li><li>Links or buttons should be provided to help the users navigate the application.<\/li><li>Style your application by adding CSS to make the application attractive.  Consider the inclusion of images, color, fonts, and other CSS styling.<\/li><\/ol>\n\n\n\n<h4>Deployment<\/h4>\n\n\n\n<ol start=\"16\"><li>Include security protections for your application.<\/li><li>Deploy the application to Heroku.<\/li><\/ol>\n\n\n\n<h4>Bonus<\/h4>\n\n\n\n<ol start=\"18\"><li>Do something extra.\u00a0 This could be the implementation of a more complicated data model, or use of additional npm packages, callouts to other public APIs, or whatever your creativity inspires. <\/li><\/ol>\n\n\n\n<h2>Reuse of Code<\/h2>\n\n\n\n<p>Some of the functions of this project are implemented in the Server Side Rendering and Authentication for Pages projects of the class.<strong>  You can reuse code from those projects to assist you,<\/strong> but your Mongoose data models must be different, to support different data. <\/p>\n\n\n\n<h2>Submission<\/h2>\n\n\n\n<p>You should submit a link to a Github repository which contains your application. It<strong> is highly encouraged that you use git branches to implement each feature.  <\/strong>This is so that if you make a mistake, it does not ruin the work you have done up to that point.  Before the due date, we will share a link to a form that you can use to submit your Github link.  You should also submit a link to your application on Heroku.<\/p>\n\n\n\n<h2>Presentation<\/h2>\n\n\n\n<p>Each student will present their application in a Zoom meeting.&nbsp; You will only have 5 minutes for each presentation, but we will have reviewed your application with you ahead of time.<\/p>\n\n\n\n<p><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Developing Your Own Express Application For the final project, you will each design and develop your own Express application.&nbsp; You will have two weeks to complete the project.&nbsp; As that is a short time for a fully functional application, the applications will have to be relatively simple, with only a few features implemented. For students<\/p>\n","protected":false},"author":5,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":{"_genesis_hide_title":false,"_genesis_hide_breadcrumbs":false,"_genesis_hide_singular_image":false,"_genesis_hide_footer_widgets":false,"_genesis_custom_body_class":"","_genesis_custom_post_class":"","_genesis_layout":"","_vp_format_video_url":"","_vp_image_focal_point":[]},"featured_image_src":null,"featured_image_src_square":null,"_links":{"self":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/pages\/1605"}],"collection":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/users\/5"}],"replies":[{"embeddable":true,"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/comments?post=1605"}],"version-history":[{"count":0,"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/pages\/1605\/revisions"}],"wp:attachment":[{"href":"https:\/\/learn.codethedream.org\/wp-json\/wp\/v2\/media?parent=1605"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}